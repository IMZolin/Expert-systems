import random
from aiogram.dispatcher.filters.builtin import CommandStart, CommandHelp
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from bot.commands import get_default_commands
from bot.forms.forms import TaskStateGroup
from bot.keyboards.default.default import get_default_markup
from loader import dp, bot
from models import User
from services.users import get_user_info, update_user
from utils.tasks.task_0.task_0 import get_task, get_answer
from utils.tasks.task_2.task_2 import task_test
from bot.keyboards.inline.task import get_hint_inline_markup
from aiogram.types import InputFile

task_1_template = InputFile("utils\\tasks\\task_1\\caesar_cipher_template.py")
task_1_dict = InputFile("utils\\tasks\\task_1\\dict.py")

words = {'–∞—Ç–µ–∏–∑–º': '—â–ª—é–≤–±—ë',
         '–±–∞—à–º–∞–∫': '–∏–∑–∞—Ñ–∑—Ç',
         '–≥–∞–∑–µ–ª—å': '—å—â–±—é–µ—Ö',
         '–≥—Ä–∞–¥—É—Å': '—ë—É–≥–∂—Ü—Ñ',
         '–¥–æ–∫—Ç–æ—Ä': '–µ–ø–ª—É–ø—Å',
         '–¥–≤–æ–π–∫–∞': '–æ–º—â—Ñ—Ö–∫',
         '–µ—Ä—É–Ω–¥–∞': '—é–π–º–∂—ç—â',
         '–∂–≤–∞—á–∫–∞': '—Å–º–∫–≤—Ö–∫',
         '–∑–∞–ø—Ä–µ—Ç': '—Ä–∏—à—â–Ω—ã',
         '–∏—Å—Ç–∏–Ω–∞': '–∂–ø—Ä–∂–ª—é',
         '–∫—Ä–µ–º–ª—å': '—É—â–Ω—Ö—Ñ–µ',
         '–∫—É—Ä–æ—Ä—Ç': '—ä–≥–∞—é–∞–≤',
         '–∫–∞–º–µ–Ω—å': '–≤—á–¥—å–µ—É',
         '–∫–∞–ø–∫–∞–Ω': '—Ü–ª—ã—Ü–ª—â',
         '–ª—é—Å—Ç—Ä–∞': '—â–ª—è–∞—é–Ω',
         '–º–æ–º–µ–Ω—Ç': '—å—é—å—Ñ—ç–≤',
         '–º—è—Å–Ω–∏–∫': '—â–ª—é—ä—Ö—á',
         '–æ–±—ã—á–∞–π': '—Ö–∑–≤—é–∂—Ä',
         '–æ—Ñ–∏—Ü–µ—Ä': '–ø—Ö–π—á—ë—Å',
         '—Ä–∞–∑—Ä—ã–≤': '–æ—é—ë–æ—â–∞',
         '—Ä–∞—Å–∏—Å—Ç': '—á–∂—à–ø—à—â',
         '—Ç–∞–ª–∞–Ω—Ç': '–∂—Ñ–∞—Ñ–≤–∂',
         '—Ç—Ä–æ—Å—Ç—å': '–Ω–ª–π–º–Ω—á',
         '—É–∫–∞–∑–∫–∞': '—ã—Ç–∑–ø—Ç–∑',
         '—Ñ–∏–≥—É—Ä–∞': '—É–∑–≤—Ç–ø—è',
         '—Ñ–∏–ª–∏–∞–ª': '—ç—Å—Ñ—Å–∏—Ñ',
         '—Ü–∏–∫–ª–æ–ø': '—ç–ø—Å—Ç—Ö—Ü',
         '—á–µ–ª–Ω–æ–∫': '—Ç–∞–∂–∏–π—ë',
         '—à–∞—Ä–∞–¥–∞': '—Ä—à–∏—à—å—à',
         '—â–µ—Ç–∏–Ω–∞': '—Ñ–∞–Ω–¥–∏—ã',
         '—â–µ–ª—á–æ–∫': '–Ω—â–∞–ª–≥—è',
         '—ç–≥–æ–∏—Å—Ç': '–¥–π—Ö–ø—à—â',
         '—ç–∫–æ–ª–æ–≥': '—â–∂–∫–∑–∫—è',
         '—é–±–∏–ª–µ–π': '—ç–∞–∑–∫–¥–∏',
         '—é–Ω–æ—Å—Ç—å': '–æ—é—è–≤–≥–º',
         '—é–≤–µ–ª–∏—Ä': '–∞–¥–∂–Ω–∫—Ç',
         '—è–ø–æ–Ω–µ—Ü': '—É–¥–≥–≤—â–∫',
         '—è—Ç—Ä–µ–±': '–±—Ñ—Ç–∂–≥',
         '—è–Ω—Ç–∞—Ä—å': '—Ä—è–¥—Å–≤–Ω',
         '—Å–º–∞–∑–∫–∞': '–æ–π—ç–µ–∑—ç',
         '—Å–Ω–∏–º–æ–∫': '—ã—á—Ç—Ü—à—Ñ',
         '–∞–≥–æ–Ω–∏—è': '—á—ä—ë–µ–∞—Ü',
         '–∞–Ω–æ–Ω–∏–º': '–∂—Ñ—Ö—Ñ–ø—É',
         '–Ω–µ–∫—Ç–∞—Ä': '–π–±–∂–æ—å–º',
         '–æ–≥—É—Ä–µ—Ü': '–ª–∞—Ä–Ω–≤—É'}

user_words = {}
matched_words = {}


@dp.message_handler(CommandStart())
async def _start(message: Message, user: User):
    text = f'–ü—Ä–∏–≤–µ—Ç {user.name}!\n–°–µ–≥–æ–¥–Ω—è —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ!\n–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω'
    await message.answer(text, reply_markup=get_default_markup(user))
    # user_words[user.id] = tuple(words.values())
    # for user, words_tuple in user_words.items():
    #     user_matched_words = {}
    #     for word, coded_word in words.items():
    #         if coded_word in words_tuple:
    #             user_matched_words[word] = coded_word
    #     matched_words[user] = user_matched_words
    # print(user_words)
    await TaskStateGroup.set_name.set()


@dp.message_handler(state=[TaskStateGroup.set_name, TaskStateGroup.change_name])
async def process_name(message: Message, state: FSMContext, user: User):
    name = message.text.strip()
    await update_user(user.id, name=name)
    await message.answer(f"–í–∞—à–µ –∏–º—è –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {name}.")
    if (await state.get_state()) == TaskStateGroup.set_name.state:
        await TaskStateGroup.task1.set()
        r = random.randint(2, 32)
        await message.answer(
        text=f"<b>–ó–∞–¥–∞–Ω–∏–µ 1: –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è</b>\n–†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ: {get_task(r)}\n–ú–æ–∂–µ—Ç–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —à–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è, –∏—Å–ø–æ–ª—å–∑—É—è —à–∞–±–ª–æ–Ω.\n–û—Ç–≤–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º(–Ω–µ —Ñ–∞–π–ª)",
        reply_markup=get_hint_inline_markup(),
        parse_mode="html")
        await bot.send_document(document=task_1_template, chat_id=user.id)
    else:
        await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('hint'), state=TaskStateGroup.task1)
async def show_hint(callback_query: CallbackQuery) -> None:
    await callback_query.message.answer("–ú–æ–∂–µ—Ç –≤–æ—Ç —Ç–∞–∫—É—é –ø–æ–¥—Å–∫–∞–∑–æ—á–∫—É?\nhttps://calculatorium.ru/cryptography/caesar-cipher")


@dp.message_handler(commands=['change_name'])
async def change_name(message: Message):
    await TaskStateGroup.change_name.set()
    await message.answer('–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω')


@dp.message_handler(text='Help! üÜò')
@dp.message_handler(CommandHelp())
async def _help(message: Message, user: User):
    commands = get_default_commands()

    text = ('Help! üÜò') + '\n\n'
    for command in commands:
        text += f'{command.command} - {command.description}\n'

    await message.answer(text)



    